<?php

namespace Feature;

ob_start();

use app\controllers\CarRepostsController;
use app\controllers\CarsController;
use app\core\Database;
use app\core\DotEnv;
use app\libs\Files\Files;
use app\models\Car;
use http\Client;
use PHPUnit\Framework\TestCase;

class CarsTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        CarsController::import();
    }

    public function test_if_files_get_imported()
    {
        $objFile = new Files();
        $objCar = new Car();
        $contentsArray = $objFile->fileContent();
        $cars = array();
        $importedCars = json_decode($objCar->all());
        for ($I = 0; $I < count($contentsArray); ++$I) {
            foreach ($contentsArray[$I] as $contentCar) {
                $cars [] = $contentCar;
            }
        }
        $this->assertEquals(count($importedCars), count($cars));
    }

    public function test_if_cars_index_contains_imported_files()
    {
        $objCar = new Car();
        $importedCars = CarsController::index();
        $this->assertEquals(count(json_decode($importedCars)), count(json_decode($objCar->all())));
    }

    public function test_if_we_can_save_new_car()
    {
        $objCar = new Car();
        $beforeInsertCount = count(json_decode($objCar->all()));
        $objCar->save([
            "Car Brand" => "Kia",
            "Car Model" => "Pride",
            "Car year" => "2022",
            "Location" => "Iran",
            "License plate" => "IR 75 Z 222",
            "Car km" => "10",
            "Number of doors" => "4",
            "Number of seats" => "4",
            "Fuel type" => "Petrol",
            "Transmission" => "Manual",
            "Car Type Group" => "Car",
            "Car Type" => "Small car",
            "Inside height" => "5.22",
            "Inside length" => "1.44",
            "Inside width" => "2.50",
        ]);
        $afterInsertCount = count(json_decode($objCar->all()));
        $this->assertEquals($beforeInsertCount + 1, $afterInsertCount);
    }

    public function test_if_we_can_find_a_car_by_year()
    {
        $objCar = new Car();
        $car_year = 2011;
        $carsCount = json_decode($objCar->search(['car_year'], [$car_year]));
        $this->assertNotEquals(0, $carsCount);
    }
}